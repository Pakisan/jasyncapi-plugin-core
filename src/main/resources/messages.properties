generation.required-parameters.checking=[required parameters]: checking
generation.required-parameters.success=[required parameters]: ok
generation.required-parameters.failure=[required parameters]: classNames or packageNames are required

generation.generation-strategy.checking=[generation strategy]: checking
generation.generation-strategy.success=[generation strategy]: %s
generation.generation-strategy.failure=[generation strategy]: %s not recognized

# Schemas
generation.find-schemas.search=    [schemas]: searching for schemas
generation.find-schemas.found=     [schemas]: %s schemas were found
generation.find-schemas.not-found= [schemas]: schemas weren't found

# Schemas: find classes
generation.find-classes.search=    \  [classes]: searching for classes
generation.find-classes.found=     \  [classes]: %s classes were found
generation.find-classes.not-found= \  [classes]: classes weren't found
# Schemas: load classes
generation.load-classes.loading=   \    loading: %s
generation.load-classes.success=   \      loaded: %s
generation.load-classes.failure=   \      can't load: %s - %s
generation.load-classes.loaded=    \  [classes]: %s classes were loaded

# Schemas: find packages
generation.find-packages.search=   \  [packages]: searching for packages
generation.find-packages.found=    \  [packages]: %s packages were found
generation.find-packages.not-found=\  [packages]: packages weren't found
# Schemas: scan packages
generation.scan-packages.scanning= \    scanning: %s
generation.scan-packages.found=    \      found %s classes:
generation.scan-packages.class=    \        %s
generation.scan-packages.failure=  \      can't load classes - %s
generation.scan-packages.scanned=  \  [packages]: %s classes were loaded